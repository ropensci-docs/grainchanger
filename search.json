[{"path":"https://docs.ropensci.org/grainchanger/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/grainchanger/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2019 Laura J. Graham  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. grainchanger Copyright (C) 2019 Laura J. Graham This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/grainchanger/articles/background.html","id":"moving-window-data-aggregation","dir":"Articles","previous_headings":"","what":"Moving-window data aggregation","title":"Background & Motivation","text":"moving-window data aggregation (MWDA) method smooths input raster using specified function within moving window specified size shape prior aggregation. acts convenient wrapper focalWeight() focal() functions raster package. Additionally, aimed write efficient functions oft-used metrics within landscape ecology use within moving window.  graphical representation MWDA method. calculating MWDA measure, three aspects scale considered. Predictor grain characteristic spatial scale predictor variable, , resolution environmental data; scale‐‐effect determines appropriate scale relationship predictor response, example, ecological neighbourhood; response grain grain unit predicting, , resolution response variable (represented black lines). Note colour scale unitless. Yellow cells represent ‘high’ values dark blue cells ‘low’ values. Panel 1 shows close one response grain cells panel 2, whereas panel 2 shows response grain cells study region. Panel 3 shows study region aggregation. Graham et al. 2019.","code":"knitr::include_graphics(\"../man/figures/mwda_schematic.png\")"},{"path":"https://docs.ropensci.org/grainchanger/articles/background.html","id":"direct-data-aggregation","dir":"Articles","previous_headings":"","what":"Direct data aggregation","title":"Background & Motivation","text":"direct method simply aggregates coarse data using specified function. example, say want calculate proportion forest municipality county level.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/articles/functions.html","id":"shannon-diversity-and-evenness","dir":"Articles","previous_headings":"","what":"Shannon diversity and evenness","title":"Built-in functions","text":"Shannon diversity calculated \\[SHDI = -\\sum_{= 1}^m p_i lnp_i\\] \\(p_i\\) proportion given class \\(\\) total \\(m\\) classes. Shannon evenness calculated \\[SHEI = \\frac{S}{ln(m)}\\]","code":""},{"path":"https://docs.ropensci.org/grainchanger/articles/functions.html","id":"additional-functions","dir":"Articles","previous_headings":"","what":"Additional functions","title":"Built-in functions","text":"plan add useful functions small set built-functions, relevant metrics FRAGSTATS. also welcome suggestions additional functions. Please add issue - way means can maximise speed function.","code":""},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"package-overview","dir":"Articles","previous_headings":"","what":"Package overview","title":"Using Grainchanger","text":"primary functions grainchanger package facilitate moving-window (winmove_agg) direct (nomove_agg) data aggregation. functions aggregate fine-grain data (fine_dat) coarse-grain (coarse_dat) using function specified user (agg_fun). moving-window method takes additional function (win_fun) smooths fine-grain data prior aggregation. moving-window smoothing function also available package (winmove), well several built-functions, additional utility function use simulated landscapes (create_torus). winmove function acts convenient wrapper raster::focalWeight raster::focal takes advantage optimised functions built grainchanger package.","code":""},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"data-aggregation-sf","dir":"Articles","previous_headings":"","what":"Data aggregation & sf","title":"Using Grainchanger","text":"functions grainchanger written compatible sf package. online textbook Geocomputation R provides introduction spatial data analysis sf package.","code":""},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"moving-window-data-aggregation","dir":"Articles","previous_headings":"Data aggregation & sf","what":"Moving-window data aggregation","title":"Using Grainchanger","text":"example, show create coarse grain grid fine-grain data using st_make_grid sf package. aggregate package data cat_ls grid using moving-window data aggregation plot using ggplot2.   Note creating grid, made 4 units smaller (size moving window) fine-resolution data. reason avoid edge effects created moving window goes beyond extent data. warning thrown fine_dat size (smaller ) coarse_dat. example , using g_sf package.","code":"library(grainchanger) library(sf) library(ggplot2)  coarse_dat <- cat_ls %>%    # get the bounding box   st_bbox() %>%    # turn into an sfc object   st_as_sfc() %>%    # negative buffer    st_buffer(-4) %>%    # make a square grid   st_make_grid(cellsize = 19) %>%    # turn into sf object   st_sf()  # we can plot this grid on top of the fine data landscapetools::show_landscape(cat_ls) +    geom_sf(data = coarse_dat, alpha = 0.5) coarse_dat$shdi_3 <- winmove_agg(coarse_dat = coarse_dat,                                   fine_dat = cat_ls,                                  d = 3,                                  type = \"rectangle\",                                   win_fun = shdi,                                   agg_fun = mean,                                  is_grid = FALSE,                                  lc_class = 1:4)  ggplot(coarse_dat, aes(fill = shdi_3)) +    geom_sf() +    theme_bw() g_sf$shei_4 <- winmove_agg(coarse_dat = g_sf,                                   fine_dat = cat_ls,                                  d = 4,                                  type = \"rectangle\",                                   win_fun = shei,                                   agg_fun = mean,                                  is_grid = FALSE,                                  lc_class = 1:4) #> Warning: Moving window extends beyond extent of `fine_dat` #> You will get edge effects for the following cells of `coarse_dat`: #> 1,2,3,4,5,6,7,8,9"},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"direct-data-aggregation","dir":"Articles","previous_headings":"Data aggregation & sf","what":"Direct data aggregation","title":"Using Grainchanger","text":"example show read shapefile sf object, apply direct data aggregation, plot using ggplot2. cont_ls fine-resolution RasterLayer provided package.","code":"library(sf) library(ggplot2)  # coarse_dat <- st_read(\"your_file.shp\") coarse_dat <- st_read(system.file(\"shape/poly_sf.shp\", package=\"grainchanger\")) #> Reading layer `poly_sf' from data source  #>   `/usr/local/lib/R/site-library/grainchanger/shape/poly_sf.shp'  #>   using driver `ESRI Shapefile' #> Simple feature collection with 39 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -6.5 ymin: -7.505553 xmax: 71.5 ymax: 75.05553 #> CRS:           NA  coarse_dat$var_range <- nomove_agg(coarse_dat = coarse_dat,                                    fine_dat = cont_ls,                                    agg_fun = var_range,                                    is_grid = FALSE)  ggplot(coarse_dat, aes(fill = var_range)) +    geom_sf() +    theme_bw()"},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Using Grainchanger","text":"number inbuilt functions grainchanger package, usage outlined . possible use user-defined functions within winmove_agg nomove_agg, welcome suggestions additional functions. Please add issue - way means can maximise speed function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"create-torus","dir":"Articles","previous_headings":"Additional utilities","what":"Create torus","title":"Using Grainchanger","text":"create_torus function takes input square rectangular landscape pads specified radius, creating effect torus. developed function order avoid edge effects testing methods simulated landscapes (NLMR).","code":"torus <- create_torus(cat_ls, 5)  landscapetools::show_landscape(torus)"},{"path":"https://docs.ropensci.org/grainchanger/articles/grainchanger.html","id":"running-aggregation-in-parallel","dir":"Articles","previous_headings":"Additional utilities","what":"Running aggregation in parallel","title":"Using Grainchanger","text":"winmove_agg nomove_agg functions designed work future package. means just one additional line code, functions can run parallel taking advantage resources available user. See future documentation information.","code":"library(future) plan(multisession)"},{"path":"https://docs.ropensci.org/grainchanger/articles/user-defined.html","id":"user-defined-win_fun-example","dir":"Articles","previous_headings":"","what":"User-defined win_fun example","title":"User-defined functions","text":"user-defined win_fun follow rules fun argument raster::focal: function fun take multiple numbers, return single number. example mean, modal, min max. also accept na.rm argument (ignore , e.g. one ‘dots’ arguments. example, length fail, function(x, …){na.omit(length(x))} works. example, define function counts number cells given class within moving window.  can also used within winmove_agg","code":"library(grainchanger) library(landscapetools) #> Warning: package 'landscapetools' was built under R version 4.3.3  num_cells <- function(x, lc_class, ...) {   return(sum(x == lc_class)) } d <- winmove(cat_ls, 4, \"rectangle\", num_cells, lc_class = 2) show_landscape(d) library(ggplot2) g_sf$num_cells <- winmove_agg(g_sf, cat_ls, 4, \"rectangle\", num_cells, lc_class = 2) #> Warning: aggregation assumes all cells are rectangular #> • set `is_grid = FALSE` if coarse_dat is not a grid #> Warning: Moving window extends beyond extent of `fine_dat` #> You will get edge effects for the following cells of `coarse_dat`: #> 1,2,3,4,5,6,7,8,9  ggplot(g_sf, aes(fill = num_cells)) +    scale_fill_viridis_c() +    geom_sf() +    theme_bw()"},{"path":"https://docs.ropensci.org/grainchanger/articles/user-defined.html","id":"user-defined-agg_fun","dir":"Articles","previous_headings":"","what":"User-defined agg_fun","title":"User-defined functions","text":"example, define function calculates number land cover classes within coarse grain cell.  can also define functions work continuous landscapes. example, calculate coefficient variation coarse cell.","code":"num_classes <- function(x, ...) {   length(unique(x)) }  g_sf$num_classes <- nomove_agg(g_sf, cat_ls, num_classes) #> aggregation assumes all cells are rectangular #> • set `is_grid = FALSE` if coarse_dat is not a grid  ggplot(g_sf, aes(fill = as.factor(num_classes))) +   scale_fill_viridis_d(\"num_classes\") +    geom_sf() +    theme_bw() cv <- function(x) {   sd(x) / mean(x) }  poly_sf$cv <- nomove_agg(poly_sf, cont_ls, cv) #> aggregation assumes all cells are rectangular #> • set `is_grid = FALSE` if coarse_dat is not a grid  ggplot(poly_sf, aes(fill = cv)) +   scale_fill_viridis_c() +    geom_sf() +    theme_bw()"},{"path":"https://docs.ropensci.org/grainchanger/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laura Graham. Author, maintainer. Felix Eigenbrod. Contributor.            Input initial conceptual development Marco Sciaini. Contributor.            Input package development structure","code":""},{"path":"https://docs.ropensci.org/grainchanger/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham L (2024). grainchanger: Moving-Window Direct Data Aggregation. R package version 0.3.2, https://github.com/ropensci/grainchanger, https://docs.ropensci.org/grainchanger/.","code":"@Manual{,   title = {grainchanger: Moving-Window and Direct Data Aggregation},   author = {Laura Graham},   year = {2024},   note = {R package version 0.3.2, https://github.com/ropensci/grainchanger},   url = {https://docs.ropensci.org/grainchanger/}, }"},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"grainchanger-","dir":"","previous_headings":"","what":"Moving-Window and Direct Data Aggregation","title":"Moving-Window and Direct Data Aggregation","text":"grainchanger package provides functionality data aggregation coarser resolution via moving-window direct methods. landscape ecologists macroecologists, often need aggregate data order harmonise datasets. , often lose lot information spatial structure environmental heterogeneity data measured finer resolution. example response data (e.g. species’ atlas data) available coarser resolution predictor data (e.g. land-use data). developed method R package order overcome issues. information background motivation development method, see Graham et al. 2019 Methods Ecology Evolution.","code":""},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Moving-Window and Direct Data Aggregation","text":"primary functions grainchanger package facilitate moving-window (winmove_agg) direct (nomove_agg) data aggregation. functions aggregate fine-grain data (fine_dat) coarse-grain (coarse_dat) using function specified user (agg_fun). moving-window method takes additional function (win_fun) smooths fine-grain data prior aggregation. moving-window smoothing function also available package (winmove), well several built-functions, additional utility function use simulated landscapes (create_torus). winmove function acts convenient wrapper raster::focalWeight raster::focal takes advantage optimised functions built grainchanger package.","code":""},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Moving-Window and Direct Data Aggregation","text":"","code":"# Install release version from CRAN install.packages(\"grainchanger\")  # Install development version from GitHub devtools::install_github(\"ropensci/grainchanger\")"},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"moving-window-data-aggregation","dir":"","previous_headings":"","what":"Moving-window data aggregation","title":"Moving-Window and Direct Data Aggregation","text":"example shows moving-window data aggregation action. aggregates categorical raster (fine_dat) grid using Shannon evenness (specified win_fun) function calculated within square moving window 5 units. value returned mean (specified agg_fun) smoothed value cell coarse_dat. value included column grid sf object.","code":"library(grainchanger) library(ggplot2) library(landscapetools)  # categorical landscape show_landscape(cat_ls, discrete = TRUE)  # moving-window aggregation using Shannon evenness g_sf$mwda <- winmove_agg(coarse_dat = g_sf,                          fine_dat = cat_ls,                           d = 5,                          type = \"rectangle\",                          win_fun = shei,                          agg_fun = mean,                          lc_class = 1:4,                          quiet = TRUE)  ggplot(g_sf) +    geom_sf(aes(fill = mwda)) +    scale_fill_viridis_c() +   theme_bw()"},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"direct-data-aggregation","dir":"","previous_headings":"","what":"Direct data aggregation","title":"Moving-Window and Direct Data Aggregation","text":"example shows direct data aggregation action. aggregates continuous raster raster coarser resolution using range function calculated cell larger grid. resulting output raster coarser resolution. var_range inbuilt function grainchanger package.","code":"library(raster)  # continuous landscape show_landscape(cont_ls)  # load the coarse resolution raster g_raster <- raster(system.file(\"raster/g_raster.tif\", package = \"grainchanger\"))  # direct aggregation using range dda <- nomove_agg(coarse_dat = g_raster,                        fine_dat = cont_ls,                         agg_fun = var_range)  show_landscape(dda)"},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Moving-Window and Direct Data Aggregation","text":"number inbuilt functions grainchanger package, usage outlined . possible use user-defined functions within winmove_agg nomove_agg, welcome suggestions additional functions. Please add issue - way means can maximise speed function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"create-torus","dir":"","previous_headings":"","what":"Create torus","title":"Moving-Window and Direct Data Aggregation","text":"create_torus function takes input raster pads specified radius, creating effect torus. developed function order avoid edge effects testing methods simulated rasters (NLMR).","code":"torus <- create_torus(cat_ls, 5)  show_landscape(torus, discrete = TRUE)"},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Moving-Window and Direct Data Aggregation","text":"welcome contributions package. contribute, submit pull request making sure develop destination branch grainchanger repository.","code":""},{"path":"https://docs.ropensci.org/grainchanger/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Moving-Window and Direct Data Aggregation","text":"Please report issues bugs. License: GPL3 Get citation information grainchanger R citation(package = 'grainchanger') Please note grainchanger project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cat_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Example categorical raster (fine_dat) — cat_ls","title":"Example categorical raster (fine_dat) — cat_ls","text":"example map show functionality categorical surfaces.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cat_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example categorical raster (fine_dat) — cat_ls","text":"","code":"cat_ls"},{"path":"https://docs.ropensci.org/grainchanger/reference/cat_ls.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example categorical raster (fine_dat) — cat_ls","text":"raster layer object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cat_ls.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example categorical raster (fine_dat) — cat_ls","text":"Sciaini M, Fritsch M, Scherer C, Simpkins CE. NLMR landscapetools: integrated environment     simulating modifying neutral landscape models R. Methods Ecology Evolution. 2018;     00:1-9. https://doi.org/10.1111/2041-210X.13076 Marco Sciaini Matthias Fritsch (2018). landscapetools: Landscape Utility Toolbox. R package version 0.4.0.     https://CRAN.R-project.org/package=landscapetools","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cat_ls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example categorical raster (fine_dat) — cat_ls","text":"Generated nlm_mpd() NLMR classified util_classify() landscapetools.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cont_ls.html","id":null,"dir":"Reference","previous_headings":"","what":"Example continuous raster (fine_dat) — cont_ls","title":"Example continuous raster (fine_dat) — cont_ls","text":"example map show functionality continuous surfaces.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cont_ls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example continuous raster (fine_dat) — cont_ls","text":"","code":"cont_ls"},{"path":"https://docs.ropensci.org/grainchanger/reference/cont_ls.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example continuous raster (fine_dat) — cont_ls","text":"raster layer object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cont_ls.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example continuous raster (fine_dat) — cont_ls","text":"Sciaini M, Fritsch M, Scherer C, Simpkins CE. NLMR landscapetools: integrated environment     simulating modifying neutral landscape models R. Methods Ecology Evolution. 2018;     00:1-9. https://doi.org/10.1111/2041-210X.13076","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/cont_ls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example continuous raster (fine_dat) — cont_ls","text":"Generated nlm_mpd() NLMR.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad a raster by a specified radius — create_torus","title":"Pad a raster by a specified radius — create_torus","text":"function pads raster specified number cells, creating effect torus. function intended use simulated landscapes, order avoid edge effects","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad a raster by a specified radius — create_torus","text":"","code":"create_torus(dat, dpad)"},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad a raster by a specified radius — create_torus","text":"dat raster dataset pad dpad amount pad raster (units raster)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad a raster by a specified radius — create_torus","text":"raster. Original raster padded r cells torus effect (see   Details)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pad a raster by a specified radius — create_torus","text":"torus infinite surface top joins bottom,   left side meets right side. See https://en.wikipedia.org/wiki/Torus   full mathematical description. function, torus effect achieved adding specified   number rows top raster bottom (vice versa)   specified number rows right raster left (  vice versa)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/create_torus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pad a raster by a specified radius — create_torus","text":"","code":"data(cat_ls) d <- create_torus(dat = cat_ls, dpad = 5)"},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Diversity metrics — diversity-metrics","title":"Diversity metrics — diversity-metrics","text":"range functions calculate well known landcover diversity metrics","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diversity metrics — diversity-metrics","text":"","code":"# S3 method for winmove shdi(x, lc_class, d, type, ...)  # S3 method for numeric shdi(x, lc_class, ...)  # S3 method for winmove shei(x, lc_class, d, type, ...)  # S3 method for numeric shei(x, lc_class, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diversity metrics — diversity-metrics","text":"x numeric, winmove. data calculate diversity metrics lc_class numeric. class values include diversity metric calculation d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers) type character. shape moving window ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diversity metrics — diversity-metrics","text":"class(x) == \"winmove\", smoothed raster diversity   metric calculated within specified moving window class(x) == \"numeric\", single value representing diversity metric  x","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diversity metrics — diversity-metrics","text":"Currently provided diversity metrics Shannon diversity Shannon   evenness. Open new issue (https://github.com/laurajanegraham/grainchanger/issues)   request additional diversity metrics.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diversity metrics — diversity-metrics","text":"McGarigal, K. Marks, B.J., 1995. FRAGSTATS: spatial pattern analysis   program quantifying landscape structure. Gen. Tech. Rep. PNW-GTR-351. Portland,   : US Department Agriculture, Forest Service, Pacific Northwest Research Station.   122 p, 351.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/diversity-metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diversity metrics — diversity-metrics","text":"","code":"# load required data data(cat_ls)  # convert data to object of class winmove cat_ls <- new(\"winmove\", cat_ls) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\"  # calculate Shannon diversity in a rectangular window of dimension 5 d <- shdi(cat_ls, d = 5, type = \"rectangle\", lc_class = 1:4) #> Error in UseMethod(\"shdi\"): no applicable method for 'shdi' applied to an object of class \"c('RasterLayer', 'Raster', 'BasicRaster')\"  # convert data to object of class numeric cat_ls <- raster::values(cat_ls)  # calculate Shannon evenness d <- shei(cat_ls, lc_class = 1:4)"},{"path":"https://docs.ropensci.org/grainchanger/reference/g_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example grid (coarse_dat) — g_sf","title":"Example grid (coarse_dat) — g_sf","text":"example grid show functionality aggregating using sf object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/g_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example grid (coarse_dat) — g_sf","text":"","code":"g_sf"},{"path":"https://docs.ropensci.org/grainchanger/reference/g_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example grid (coarse_dat) — g_sf","text":"sf object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/g_sf.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example grid (coarse_dat) — g_sf","text":"Sciaini M, Fritsch M, Scherer C, Simpkins CE. NLMR landscapetools: integrated environment     simulating modifying neutral landscape models R. Methods Ecology Evolution. 2018;     00:1-9. https://doi.org/10.1111/2041-210X.13076","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/g_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example grid (coarse_dat) — g_sf","text":"Generated nlm_mpd() converted sf.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/grainchanger-package.html","id":null,"dir":"Reference","previous_headings":"","what":"grainchanger: Moving-Window and Direct Data Aggregation — grainchanger-package","title":"grainchanger: Moving-Window and Direct Data Aggregation — grainchanger-package","text":"Data aggregation via moving window direct methods. Aggregate      fine-resolution raster grid. moving window method smooths surface      using specified function within moving window specified size shape      prior aggregation. direct method simply aggregates grid using      specified function.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/grainchanger/reference/grainchanger-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"grainchanger: Moving-Window and Direct Data Aggregation — grainchanger-package","text":"Maintainer: Laura Graham LauraJaneEGraham@gmail.com (ORCID) contributors: Felix Eigenbrod f.eigenbrod@soton.ac.uk (Input initial conceptual development) [contributor] Marco Sciaini sciaini.marco@gmail.com (Input package development structure) [contributor]","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic mean — mean","title":"Arithmetic mean — mean","text":"extension mean objects class winmove","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic mean — mean","text":"","code":"mean(x, ...)  # S3 method for winmove mean(x, d, type, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic mean — mean","text":"x RasterLayer. data calculate mean value within moving window ... arguments passed methods d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers) type character. shape moving window","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic mean — mean","text":"RasterLayer. smoothed raster mean calculated within specified   moving window","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic mean — mean","text":"","code":"# load required data data(cont_ls)  # convert data to object of class winmove cont_ls <- new(\"winmove\", cont_ls) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\"  # aggregate using a circular window with radius 3 d <- mean(cont_ls, d = 3, type = \"circle\") #> Warning: argument is not numeric or logical: returning NA"},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct data aggregation — nomove_agg","title":"Direct data aggregation — nomove_agg","text":"Calculate value given function cell larger resolution grid.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct data aggregation — nomove_agg","text":"","code":"nomove_agg(coarse_dat, fine_dat, agg_fun, is_grid = TRUE, quiet = FALSE, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct data aggregation — nomove_agg","text":"coarse_dat sf, Raster* Spatial* object. coarse grain data (response data) across calculate aggregated function fine_dat Raster* object. Raster* object. fine grain data (predictor / covariate data) aggregate agg_fun function function apply. function fun take multiple numbers, return single number. example mean, modal, min max. also accept na.rm argument (ignore , e.g. one 'dots' arguments. example, length fail, function(x, ...)na.omit(length(x)) works. See Details is_grid logical. Use TRUE (default) g contains rectangular cells (.e. grid). g polygon file, set false quiet logical. FALSE (default) is_grid == TRUE user gets warning aggregation assumes cells rectangular ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct data aggregation — nomove_agg","text":"Raster (input Raster) numeric vector (input sp sf   object) containing values calculated coarser cell","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Direct data aggregation — nomove_agg","text":"grainchanger several built-functions. Functions   currently included : shdi - Shannon diversity, requires additional argument lc_class (vector scalar) shei - Shannon evenness, requires additional argument lc_class (vector scalar) prop - Proportion, requires additional argument lc_class (scalar) var_range - Range (max - min) Note nomove_agg can run parallel using plan(multiprocess) future package.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/nomove_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Direct data aggregation — nomove_agg","text":"","code":"# load required data data(g_sf) data(cont_ls) data(cat_ls)  # aggregate using mean d <- nomove_agg(g_sf, cont_ls, mean) #> aggregation assumes all cells are rectangular #> • set `is_grid = FALSE` if coarse_dat is not a grid  # aggregate using Shannon evenness d <- nomove_agg(g_sf, cont_ls, shei, lc_class = 1:4) #> aggregation assumes all cells are rectangular #> • set `is_grid = FALSE` if coarse_dat is not a grid"},{"path":"https://docs.ropensci.org/grainchanger/reference/poly_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Example polygon (coarse_dat) — poly_sf","title":"Example polygon (coarse_dat) — poly_sf","text":"example non-gridded coarse data show functionality aggregating using sf object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/poly_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example polygon (coarse_dat) — poly_sf","text":"","code":"poly_sf"},{"path":"https://docs.ropensci.org/grainchanger/reference/poly_sf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example polygon (coarse_dat) — poly_sf","text":"sf object.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/poly_sf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example polygon (coarse_dat) — poly_sf","text":"Generated sf::st_make_grid(sf::st_as_sfc(sf::st_bbox(cont_ls)), cellsize = 13, square = FALSE)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate proportion of a given value — prop","title":"Calculate proportion of a given value — prop","text":"Calculate proportion given value present within raster. Useful calculating land-cover soil type proportions. used categorical raster","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate proportion of a given value — prop","text":"","code":"prop(x, lc_class, ...)  # S3 method for winmove prop(x, lc_class, d, type, ...)  # S3 method for numeric prop(x, lc_class, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate proportion of a given value — prop","text":"x numeric, winmove. data calculate proportion lc_class numeric. class value calculate proportion ... arguments passed methods d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers) type character. shape moving window","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate proportion of a given value — prop","text":"class(x) == \"winmove\", smoothed raster proportion   cells given class calculated within specified moving window class(x) == \"numeric\", single value representing proportion values   given class x","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/prop.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate proportion of a given value — prop","text":"","code":"# load required data data(cat_ls)  # convert data to object of class winmove cat_ls <- new(\"winmove\", cat_ls) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\"  # aggregate using a rectangular window with dimension 5 for class 3 d <- prop(cat_ls, d = 5, type = \"rectangle\", lc_class = 3) #> Error in UseMethod(\"prop\"): no applicable method for 'prop' applied to an object of class \"c('RasterLayer', 'Raster', 'BasicRaster')\"  # convert data to object of class numeric cat_ls <- raster::values(cat_ls) d <- prop(cat_ls, lc_class = 2)"},{"path":"https://docs.ropensci.org/grainchanger/reference/var_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Size of range of values — var_range","title":"Size of range of values — var_range","text":"Calculates difference maximum minimum value","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/var_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Size of range of values — var_range","text":"","code":"var_range(x, ...)  # S3 method for winmove var_range(x, d, type, na.rm = TRUE, ...)  # S3 method for numeric var_range(x, na.rm = TRUE, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/var_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Size of range of values — var_range","text":"x RasterLayer. data calculate range size ... arguments passed methods d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers) type character. shape moving window na.rm logical. indicates whether NA values stripped computation proceeds. na.rm = TRUE default","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/var_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Size of range of values — var_range","text":"class(x) == \"winmove\", smoothed raster size range values calculated within specified   moving window class(x) == \"numeric\", single value representing size range values x","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/var_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Size of range of values — var_range","text":"","code":"# load required data data(cat_ls) data(cont_ls)  # convert data to object of class winmove cat_ls <- new(\"winmove\", cat_ls) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\"  # aggregate using a rectangular window with dimensions c(2,3) d <- range(cont_ls, d = c(2,3), type = \"rectangle\") #> Warning: Nothing to summarize if you provide a single RasterLayer; see cellStats  # convert data to object of class numeric cont_ls <- raster::values(cont_ls) d <- range(cont_ls)"},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for use with winmove functions (extends RasterLayer) — winmove-class","title":"An S4 class for use with winmove functions (extends RasterLayer) — winmove-class","text":"S4 class use winmove functions (extends RasterLayer). Objects   need set class order used inbuilt winmove   functions (e.g. mean, prop, var_range, shdi, shei)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for use with winmove functions (extends RasterLayer) — winmove-class","text":"Slots RasterLayer RasterBrick objects title: Character file: Object class \".RasterFile\" data: Object class \".SingleLayerData\" \".MultipleLayerData\" history: record processing history, yet use legend: Object class .RasterLegend, Default legend. store preferences plotting. yet implemented except stores color table images, available extent: Object Extent-class ncols: Integer nrows: Integer crs: Object class \"CRS\", .e. coordinate reference system. Spatial* objects slot called 'proj4string'","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class for use with winmove functions (extends RasterLayer) — winmove-class","text":"","code":"# load required data data(cat_ls)  # set \\code{cat_ls} to object of class winmove new(\"winmove\", cat_ls) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":null,"dir":"Reference","previous_headings":"","what":"Create moving window surface — winmove","title":"Create moving window surface — winmove","text":"Smooth raster surface using moving window given function, radius shape.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create moving window surface — winmove","text":"","code":"winmove(fine_dat, d, type = c(\"circle\", \"rectangle\"), win_fun, ...)"},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create moving window surface — winmove","text":"fine_dat raster dataset calculate moving window function d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers). type shape moving window win_fun function. function apply. choosing one inbuilt grainchanger functions, function take multiple numbers, return single number. example mean, modal, min max. also accept na.rm argument (ignore , e.g. one 'dots' arguments. example, length fail, function(x, ...){na.omit(length(x))} works. See Details ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create moving window surface — winmove","text":"RasterLayer. smoothed raster moving window values calculated","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create moving window surface — winmove","text":"grainchanger several built-functions. Functions currently   included : wm_shei - Shannon evenness, requires   additional argument lc_class (vector scalar) wm_prop -   Proportion, requires additional argument lc_class (scalar) wm_classes - Unique number classes categorical landscape var_range - Range (max - min)","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create moving window surface — winmove","text":"","code":"# load required data data(cat_ls) data(cont_ls)  # calculate the moving window mean d <- winmove(cont_ls, 5, \"rectangle\", mean) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\"  # calculate the moving window Shannon evenness d <- winmove(cat_ls, 5, \"rectangle\", shei, lc_class = 1:4) #> Error in slot(value, what): no slot of name \"srs\" for this object of class \"RasterLayer\""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":null,"dir":"Reference","previous_headings":"","what":"Moving-window data aggregation — winmove_agg","title":"Moving-window data aggregation — winmove_agg","text":"Calculate mean moving window value given radius, shape function cell larger resolution grid.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Moving-window data aggregation — winmove_agg","text":"","code":"winmove_agg(   coarse_dat,   fine_dat,   d,   type = c(\"circle\", \"rectangle\"),   win_fun,   agg_fun = mean,   is_grid = TRUE,   quiet = FALSE,   ... )"},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Moving-window data aggregation — winmove_agg","text":"coarse_dat sf, Raster* Spatial* object. coarse grain data (response data) across calculate aggregated moving window function fine_dat Raster* object. fine grain data (predictor / covariate data) aggregate d numeric. type=circle, radius circle (units CRS). type=rectangle dimension rectangle (one two numbers). type character. shape moving window win_fun character. function apply moving window. function win_fun take multiple numbers, return single number. example mean, modal, min max. also accept na.rm argument (ignore , e.g. one 'dots' arguments. example, length fail, function(x, ...){na.omit(length(x))} works. See Details agg_fun character. function aggregate. default set mean is_grid logical. Use TRUE (default) g contains rectangular cells (.e. grid). g polygon file, set false quiet logical. FALSE (default) is_grid == TRUE user gets warning aggregation assumes cells rectangular ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Moving-window data aggregation — winmove_agg","text":"Numeric vector containing moving window values calculated   grid cell","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Moving-window data aggregation — winmove_agg","text":"grainchanger several built-functions. Functions   currently included : shdi - Shannon diversity, requires additional argument lc_class (vector scalar) shei - Shannon evenness, requires additional argument lc_class (vector scalar) prop - Proportion, requires additional argument lc_class (scalar) var_range - Range (max - min) Note winmove_agg can run parallel using plan(multiprocess) future package.","code":""},{"path":"https://docs.ropensci.org/grainchanger/reference/winmove_agg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Moving-window data aggregation — winmove_agg","text":"","code":"if (FALSE) { # load required data data(g_sf) data(cont_ls) data(cat_ls)  # aggregate using mean d <- winmove_agg(g_sf, cont_ls, 5, \"rectangle\", mean)  # aggregate using Shannon evenness d <- winmove_agg(g_sf, cat_ls, 5, \"rectangle\", shei, lc_class = 1:4) }"},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-032","dir":"Changelog","previous_headings":"","what":"grainchanger 0.3.2","title":"grainchanger 0.3.2","text":"CRAN release: 2021-02-01 skip var_range calculation correct test CRAN","code":""},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-031","dir":"Changelog","previous_headings":"","what":"grainchanger 0.3.1","title":"grainchanger 0.3.1","text":"CRAN release: 2021-01-29 Add GitHub actions testing","code":""},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-030","dir":"Changelog","previous_headings":"","what":"grainchanger 0.3.0","title":"grainchanger 0.3.0","text":"Fix failing test linux","code":""},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-020","dir":"Changelog","previous_headings":"","what":"grainchanger 0.2.0","title":"grainchanger 0.2.0","text":"CRAN release: 2019-06-28 successful review rOpenSci added functionality aggregate data polygon (use parameter is_grid = FALSE) added ability user specify aggregation function (agg_fun) winmove_agg fn now win_fun g now coarse_dat dat now fine_dat agg_fun win_fun entered unquoted function names (previously character input)","code":""},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-010","dir":"Changelog","previous_headings":"","what":"grainchanger 0.1.0","title":"grainchanger 0.1.0","text":"CRAN release: 2019-03-08 First stable release grainchanger","code":""},{"path":"https://docs.ropensci.org/grainchanger/news/index.html","id":"grainchanger-0009000","dir":"Changelog","previous_headings":"","what":"grainchanger 0.0.0.9000","title":"grainchanger 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
